#!/bin/bash

DIR=$(readlink -f $0)
DIR=$(dirname "$DIR")
export FS_ROOT=${FS_ROOT:-$(realpath "$DIR"/../..)}

if [ "$#" -lt 2 ] || [ "$1" = "--help" ]; then
  echo "--- Usage: ---"
  echo "emulatorlauncher -rom <path/to/rom> [[-<propertyName> propertyOveride] ...] [[--<additionalOperation>] ...]"
  echo
  echo "Starts the given game. Reads and merges all properties and configurations from batocera.conf, folder-based overrides and user overrides."
  echo "This is mainly called from 'emulationstation', but can also be used from the console for debugging and testing purposes."
  echo
  echo "Any simple property that appears in a system's configuration can be force-overriden by passing it the to emulatorlauncher."
  echo "Properties given this way with a value != 'AUTO|auto' will not be taken from any configuration file."
  echo "'Simple' properties are those with the form 'systemName.propertyName' or those that do not contain a dot at all."
  echo "'emulationstation' uses 'system', 'emulator', 'core'."
  echo
  echo "'additionalOperations' are special actions that can be used to enhance or control the output and behavior of emulatorlauncher."
  echo "They are mostly intended for debugging or internal purposes when interacting with some other launcher scripts."
  echo "Additional operations will be executed in the order given after emulatorlauncher has finished all preparation steps."
  echo "They are the last actions to be run before the actual any real action (modifying properties, notifiying listeners, launching) is taken."
  echo "Current operations are:"
  echo " * 'effectiveProperties': Prints the result of merging all property source files in shell-style.  "
  echo "   For debugging only. emulatorlauncher normally sources this as code as one step of property calculation"
  echo " * 'launchConfiguration': Prints the launch command and all properties and configuration file (changes) that will be used to start the game"
  echo " * 'noRun': Just stop and exit. This is only useful in combination with 'effectiveProperties' or 'launchConfiguration'"
  exit 1
fi

source "$FS_ROOT"/opt/batocera-emulationstation/logging.lib ~/emuLaunch.log

#first one is always controller config
#controllerConfig="$1"
#shift

_logAndOut "starting emulatorlauncher with args:[$@]"

#array for additional functions, if any.
#Will be executed in the order given just before the game is launcher
_operations=()
_declaredVars=()

POST_RUN_ACTIONS=()
function _postRunActions {
  for hook in "${POST_RUN_ACTIONS[@]}"; do
    $hook
  done
}
trap _postRunActions EXIT

# regular declare readonly leads the script to crash if the variable is declared again
# which is what i don't want. i just want the second statement to not have any affect
# so that i can protect properties from being overriden when sourcing multiple files in sequence
# Has to forms:
# 1. declare-ro "name=value"
# 1. declare-ro -A "name"
function declare-ro {
  if [ "-A" = "$1" ]; then
    local _flags="-gA" && shift
  fi
  local splitLine=(${1/=/ })
  local varname="${splitLine[0]}"
  if [ -z "${!varname}" ]; then
    declare ${_flags:--g} "$1"
    _declaredVars+=("$varname")
  else
    _logAndOut "Ignoring declaration of pre-existing variable $varname"
  fi
}

while [ "$#" -gt 0 ]; do
  if [[ "$1" =~ ^--.* ]]; then
    curOp="${1/--/}"
    opArgs=()
    while [ -n "$2" ] && ! [[ "$2" =~ ^--.* ]]; do
      opArgs+=("$2")
      shift
    done
    _operations+=("$curOp ${opArgs[@]}")
  elif [[ "$1" =~ ^-[[:alpha:]].* ]]; then
    #arguments starting with - are mapped to variables of the same name. all can be used to override config values
    #first - is removed, all following mapped to _ instead
    varname="${1/-/}"
    varname="${varname//-/_}"
    if [ -n "$2" ] && ! [[ "$2" =~ auto|AUTO ]]; then
      declare-ro "$varname=$2"
    fi
    shift
  else
    _logOnly "ignore $1"
  fi

  shift
done
unset varname

if [ -z "$rom" ]; then
  _logAndOut "-rom path/to/rom is required at the very least."
  exit 1
fi

#----- operations and functions --------------------------

#$1:name, or part of the name of the executable to find
locateExecutable(){
  _logAndOut "searching for full path of executable like '$1'"
  local binPath=$(which "$1" 2>/dev/null)

  if [ -z "$binPath" ]; then
    _logAndOut "not found in PATH, try custom configuration from es_find_rules.xml"

    local findRulesFiles=("$ES_CONFIG_HOME/es_find_rules.xml" "$EMU_CFG_DIR/es_find_rules.xml")
    for (( f=0; f < "${#findRulesFiles[@]}"; f++ )); do
      local findRulesFile=$(realpath -m "${findRulesFiles[$f]}")
      if [ -f "$findRulesFile" ]; then
        _logOnly "search '$findRulesFile' for hints on executable search paths"
      else
        _logOnly "skipping none-existent file '$findRulesFile'"
        continue
      fi

      potentialPaths=($(cat "$findRulesFile" | grep -iE ".*/.*$1.*"))
      for (( i=0; i < "${#potentialPaths[@]}"; i++ )); do
        file="${potentialPaths[$i]/<entry>/}"
        file="${file/<\/entry>/}"

        #file names can contain * in a lot of cases (appimages)
        file=$(find $(dirname "$file") -name $(basename "$file"))
        if [ -f "$file" ] && [ -x "$file" ]; then
          binPath="$file"; break
        fi
      done

      [ -n "$binPath" ] && break
    done

  fi

  _logAndOut "found '$1' at $binPath"
  echo "$binPath"
}

# Create a sourceable string of bash property declarations.
# Could basically also be used like launchConfig with 'emulatorlauncher -rom "somerom" --effectiveProperties',
# although it does not make much sense because launchConfiguration already outputs all declared variables.
#
# Format:
# declare-ro 'simpleProp=value'
# declare-ro -A arrayName
# arrayName['key']='value'
#
# $1: path to rom
function effectiveProperties {
  #ROMS_ROOT_DIR is supplied as ENV
  #also pass in system (if given on cmdline), used in btc-config as fallback to find roms-root-dir
  local executable="$FS_ROOT"/opt/batocera-emulationstation/btc-config
  # build controller names for SDL strings
  local gamepadFilters=()
  for p in p{1..8}; do
    id="${p}guid"
    [ -z "${!id}" ] && continue
    name="${p}name"
    gamepadFilters+=("${!id}:${!name:-.*}")
  done
  "$executable" effectiveProperties --format sh --system "$system" --declare-fn 'declare-ro' --strip-prefix 1 "${1:-$rom}" "${gamepadFilters[@]}"
  return $?
}

function launchConfiguration {
  # shellcheck disable=SC2145
  echo launchCommand=\("${launchCommand[@]}"\)
  echo "configFiles=()"
  for c in "${configFiles[@]}"; do
    echo "configFiles+=('$c')"
  done
  for v in "${_declaredVars[@]}"; do
    declare -p "$v"
  done
}

function noRun {
  _logAndOut "--noRun given - skip game execution"
  exit 0
}

# Call the 'batocera' event script mechanism which is additional to what emulationstation provides.
# arguments (according to batocera wiki: https://wiki.batocera.org/launch_a_script#watch_for_a_game_start_stop_event):
# gameStart|gameStop system emulator core fullRomPath
function notifyListener {
  for scriptDir in "$EMU_CFG_DIR/scripts" "$ES_CONFIG_HOME/scripts/batocera"; do
    [ -e "$scriptDir" ] || continue
    find "$scriptDir" -type f -executable \
      -exec '{}' "$1" "$system" "$emulator" "$core" "$absRomPath" ';'
  done
}

# internal usage - print full configuration when launch command fails
function debugOutputOnError {
  [ "$launchResult" = "0" ] && return
  _logAndOut "Failed to launch [$rom] with configuration:"
  launchConfiguration
}

#----- Begin logic ------------------------------------------

ROMS_ROOT_DIR=${roms_dir:-$ROMS_ROOT_DIR}

if [ -z "$ROMS_ROOT_DIR" ]; then
  _logAndOut 'No env $ROMS_ROOT_DIR given and no parameter [-roms-dir path/to/rom-root] supplied - assuming default: ~/ROMs'
  _logAndOut 'ROMS_ROOT_DIR is used to resolve system and folder specific configuration'
fi

source "$FS_ROOT"/opt/batocera-emulationstation/common-paths.lib
source <( effectiveProperties "$rom" )

EMU_CMD_DIR=${EMU_CMD_DIR:-$(realpath "$FS_ROOT"/opt/emulatorlauncher)}
EMU_CFG_DIR=${EMU_CFG_DIR:-$(realpath "$CONFIG_ROOT"/emulatorlauncher)}

relativeRomPath=$(realpath -s --relative-to="$ROMS_ROOT_DIR" "$absRomPath")
_declaredVars+=(relativeRomPath)

gamename=$(basename "$relativeRomPath")
_declaredVars+=(gamename)

# BEGIN BLOCK: Helper scripts used to offload functionality
# Scripts are sourced so that they have full read and write access to all variables.
# This allows manipulation of existing properties or registering pre/post game hooks.
source "$EMU_CMD_DIR"/.value-transformations.lib
source "$EMU_CMD_DIR"/.controls.lib
# END BLOCK

#This property shall be used by sourced emu configurators if they need to write properties
#to a file (or several) and when the emulator supports being passed a path to a file.
#This method of configuration shall be preferred over changing system or user default files
export CONFIG_FILE_PATH="$ES_STATE_DIR/$emulator"
rm -rf "$CONFIG_FILE_PATH"

# A key-value map of configurations to replace. Launch scripts can populate this when systems
# don't support a command line argument to point to different configuration files/directories.
# This is important because no temporary emulator configuration should overwrite the users general desktop configuration
# if the emulator is also in use outside of emulationstation.
# emulatorlauncher will make sure that the files are replaced before start and after end.
# The 'new' config files must be in a temporary path, and the parents directories of the sources must be writable/executable
#
# key will be the source file/directory
# value is the replacement to use
declare -A replaceConfigs=()

# mostly used for debug output and to be populated by the launcher script
configFiles=()

#expect emulator and core to be resolved now. source the configuration to get launchCommand
#all launcher configurations are expected to be in one of the name formats:
# - 'system_emulator_core.sh': requires system, emulator and core must be 'any' if optional
# - 'emulator_core.sh': requires emulator, core must be 'any' if optional
_logAndOut "sourcing config for [s:$system, e:$emulator, c:$core] ..."
_emuConfigs=(
  "$EMU_CMD_DIR"/"${system}_${emulator:-any}_${core:-any}.sh"
  "$EMU_CMD_DIR"/"${system}_${emulator:-any}_any.sh"
  "$EMU_CMD_DIR"/"${system}_any_any.sh"
  "$EMU_CMD_DIR"/"${emulator}_${core:-any}.sh"
  "$EMU_CMD_DIR"/"${emulator}_any.sh"
)

for cfg in "${_emuConfigs[@]}"; do
  ! [ -f "$cfg" ] && continue
  _logAndOut "using config file '$cfg'"
  source "$cfg" && break
done

if [ -z "$launchCommand" ]; then
  _logAndOut "No configuration with a valid launchCommand found for [s:$system, e:$emulator, c:$core]. Exiting"
  exit 1
fi

_logAndOut "starting game with command (length:${#launchCommand[@]}): [${launchCommand[@]}] ..."
if [ "$videomode" != "default" ] && which gamescope > /dev/null; then
  #FIXME: not working - need a new concept or ignore?
  res=(${videomode/x/ })
  scoping=('gamescope' '-w' ${res[0]} '-h' ${res[1]} '-f' '-b' '--')
  launchCommand=("${scoping[@]}" "${launchCommand[@]}")
fi

# executes additional pre-launch operations that were given either via command line or from within the script
for op in "${_operations[@]}"; do
  $op
done

# FIXME: the entire property replace logic is flawed and has to be replaced/rewritten
if [ "${#replaceConfigs[@]}" -gt 0 ]; then
  _logAndOut "emulator configuration has requested replacement of standard config files:"
  content=$(declare -p replaceConfigs)
  _logOnly "${content//\[/$'\n'  \[}"

  for origPath in "${!replaceConfigs[@]]}"; do
    tempTarget="${replaceConfigs[$origPath]}"

    mv "$origPath" "${origPath}.orig"
    #links don't need sudo, contrary to bind mounts
    ln -s -T "$tempTarget" "$origPath"
  done

  function revertConfigFileReplace {
    for origPath in "${!replaceConfigs[@]]}"; do
      [ -L "$origPath" ] && rm "$origPath"
      mv "${origPath}.orig" "$origPath"
    done
  }
  export -f revertConfigFileReplace

  POST_RUN_ACTIONS+=('revertConfigFileReplace')
fi

POST_RUN_ACTIONS+=('debugOutputOnError')
POST_RUN_ACTIONS+=('notifyListener gameStop')

notifyListener gameStart

"${launchCommand[@]}" 1>&2 2> "$ES_STATE_DIR/emulatorlauncher/gamerun-${gamename}.log"
launchResult=$?
# FIXME: might have to wait for launched program generically here
