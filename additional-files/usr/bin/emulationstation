#!/bin/bash

# This script attempts to pre-configure emulationstation to roughly conform to XDG specifications.
#
# How:
# 1. This script takes and passes through all arguments given to it. 
#    It behaves like an invisible proxy for the real executable that applies a bit of preconfiguration.
# 
# 2. The call to the real executable will always be run with '--home homepath' to get more control over the path.
#    If '--home homedir' is not given as argument to this script, it will be set to default /home/user.
#    ES automatically assumes and creates a directory named '.emulationstation' under homedir.
#    The homedir given to ES is also used for ~ expansion in es_systems.cfg. If it was located under XDG_CONFIG_HOME, 
#    any path in es_systems.cfg using ~ would be resolved relative to XDG_CONFIG_HOME, which is not desirable and not
#    the correct location for Roms. Thus, the default home must remain, but the subdir .emulationstation will instead
#    by created as a link to XDG_CONFIG_HOME/emulationstation.     
#
# 3. ES knows and uses several additional paths/folders for music, themes etc which are normally all resolved relative to homedir
#    or, when compiled with BATOCERA switch, hardcoded to certain subdirectories of /userdata. 
#    The none-BATOCERA lookup works like following:
#    a) First a file named "emulationstation.ini" is searched for in 3 places and in the order given:
#       - In the same directory as the executable
#	      - In homedir/.emulationstation
#       - In homedir/.emulationstation/..
#    b) The first directory found this way is taken as base for relative paths to other resource dirs.
#       Any such path that resolves to an existing directory is taken.
#    c) The emulationstation.ini found during a) is parsed as property file. Almost all system and user-specific resource dirs
#       can be overridden here by adding the correct property.   
#
# 4. This script will now generate a customized path config file at homedir/.emulationstation/emulationstation.ini.
#    With this, the paths detected during step 3.b) are manually corrected after dynamic lookup.
#    This is required because emulationstation resolves all directories relative to emulationstation.ini in a broken way:
#    It uses parentDirOf(emulationstation.ini)/../folderName for various resource folders, which is 
#    illogical/wrong in almost all cases. 
#
#    Broken examples of folder autodetect:
#    a) /opt/batocera-emulationstation/emulationstation + /opt/batocera-emulationstation/emulationstation.ini 
#       expects folders named {log,music,saves,themes,decorations,shaders} and some more in either
#			  - homedir/foldername (for user overrides to system resources) 
#         (note: NOT in .emulationstation subdir, it deliberately goes up one directory from there) OR
#       - /opt/batocera-emulationstation/../foldername
#       - /opt/batocera-emulationstation/../system/foldername
#    b) /home/user/.emulationstation/emulationstation.ini
#       expects folders named {log,music,saves,themes,decorations,shaders} and some more in either
#       - /home/user/.emulationstation/foldername
#       - /home/user/system/foldername
#       - /home/user/foldername
#       ... which is a very impolite pollution of the user's home directory
#
# 5. This script generates the file emulationstation.ini only if it does not exist. This is done to allow user modifications if desired,
#    although nothing can then be done about misconfigurations. That's the users responsibility.
#
# Apart from the ini file and (optional) home adjustment, all arguments are passed to the real emulationstation binary as given to this script.
#
# Please note that this script only works correctly under the assumption that there is no 'default' emulationstation.ini
# directly next to the binary in /opt/batocera-emulationstation because ES checks this location first.
# As it is a property file, paths containing ~ are possible, but no variables are expanded. Thus, no XDG env var would work here.
# And changing the system-owned read-only property file whenever a user starts ES is a bad idea.

for (( i=1; i <= "$#"; i++ )); do
    if [ "--home" = "${!i}" ]; then
    	let idx=$i+1
    	esHome="${!idx}"
    	esHome=$(realpath -s "$esHome")
    fi
    
    if [ "--romdir" = "${!i}" ]; then
    	let idx=$i+1
    	romDir="${!idx}"
    	romDir=$(realpath -s "$romDir")
    	#remove romdir from argline
    	set -- "${@:1:i-1}" "${@:idx+1}"
    	#re-evaluate the same index again because of the now-left-shifted next argument
    	let i=$i-1
    fi
done

# Resolve script location first. 
# Allows to run it also from a not-yet installed package target dir
scriptLoc=$(dirname $(realpath -s "$0"))
echo "script location is: $scriptLoc"

XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}
XDG_STATE_HOME=${XDG_STATE_HOME:-$HOME/.local/state}

if [ -z "$esHome" ]; then
	echo "no --home given, use default"
	esHome=$(realpath ~)
	customHomeArg="$esHome"
fi

echo "found home for ES: $esHome"
esHome="$esHome/.emulationstation"

esCfgDir=$(realpath -s "$XDG_CONFIG_HOME/emulationstation")
esDataDir=$(realpath -s "$XDG_DATA_HOME/emulationstation")
esStateDir=$(realpath -s "$XDG_STATE_HOME/emulationstation")
esCacheDir=$(realpath -s "$XDG_CACHE_HOME/emulationstation")
sysResourcesDir=$(realpath -s "$scriptLoc/../../usr/share/batocera-emulationstation")

mkdir -p "$esCfgDir" "$esStateDir" "$esCacheDir" \
	"$esDataDir"/{saves,music,themes,inputmapping,decorations,shaders,videofilters} \
	"$esDataDir"/retroachievements/sounds
# Re-generate link, as another argument for home might have been given.
# home effectively only controls, where the ROMs directory shall be placed. 
# All other paths are configured below as subdirs of XDG_*_HOME paths accordingly.
[ -e "$esHome" ] && rm "$esHome"
if ! [ -e "$esHome" ]; then
	echo "re-create link from [$esHome] to [$esCfgDir]"
	ln -s -T "$esCfgDir" "$esHome"
elif [ -d "$esHome" ]; then
	echo "$esHome is a directory. Will not link to XDG_CONFIG_HOME. This may lead to missing configuration files."
fi

if ! grep 'autocreate=false' "$esHome/emulationstation.ini" 2>/dev/null; then
	echo "recreate config file at $esHome/emulationstation.ini"
	echo "\
#change to false to prevent automatic recreation of file through startup script
autocreate=true
#!!when editing, make sure that no line ends with a blank space!!
#in fact, there should not be any spaces at all (unless they are part of the path itself)
#ES does NOT perform trimming, neither at the end, nor around the =
root=$HOME
log=$esStateDir
screenshots=$esDataDir/screenshots
saves=$esDataDir/saves
system.music=$sysResourcesDir/music
music=$esDataDir/music
system.themes=$sysResourcesDir/themes
themes=$esDataDir/themes
system.padtokey=$sysResourcesDir/inputmapping
padtokey=$esDataDir/inputmapping
system.decorations=$sysResourcesDir/decorations
decorations=$esDataDir/decorations
system.shaders=$sysResourcesDir/shaders
shaders=$esDataDir/shaders
system.videofilters=$sysResourcesDir/videofilters
videofilters=$esDataDir/videofilters
system.retroachievementsounds=$sysResourcesDir/retroachievements/sounds
retroachievementsounds=$esDataDir/retroachievements/sounds
timezones=/usr/share/zoneinfo
" > "$esHome/emulationstation.ini"
fi

binaryPathPrefix="$scriptLoc/../../opt/batocera-emulationstation/bin"
binaryPathPrefix=$(realpath -s "$binaryPathPrefix")

romDir=${romDir:-'~/ROMs'}
$binaryPathPrefix/../config.js createUserSystemConfig "$binaryPathPrefix/es_systems.cfg" "$esHome/es_systems.cfg" --romdir "$romDir"

if [ -z "$customHomeArg" ]; then
	exec "$binaryPathPrefix"/emulationstation "$@"
else
	exec "$binaryPathPrefix"/emulationstation --home "$customHomeArg" "$@"
fi