Object.assign(globalThis, require('test-helpers.mjs'));

const assert = require('node:assert/strict');
const { execSync } = require('node:child_process');

enableLogfile();
const logging = require('config.libs/logger.js');

const TEST_RESOURCE_ROOT = ROOT_PATH + "/test/resource/fs_root";
const CONFIG_ROOT = TEST_RESOURCE_ROOT + "/configs";
const DROPIN_DIR = TEST_RESOURCE_ROOT + "/configs/dropins";
const BTC_BIN_DIR = TEST_RESOURCE_ROOT + "/btcDir/bin";
process.env.BTC_BIN_DIR = BTC_BIN_DIR;

//need import to get function defined on API into globalThis
const btc = require('btc-config');
const importer = require('config.libs/config-import.js');

function logDiff(file) {
  LOGGER.error(
    `Unexpected diff in [${file}]:\n`,
    execSync(`git diff "${file}"`, { encoding: 'utf8' }) || ' -> not under version control'
  )
}

class ImportTests {
  // the test file contains 2 more, a 360 controller and a PS controller
  static EXPECTED_SDL = [
    '0000000058626f782047616d65706100,Xbox Gamepad (userspace driver),platform:Linux,a:b0,b:b1,y:b3,x:b2,lefttrigger:b6,righttrigger:b7,leftstick:b11,rightstick:b12,leftshoulder:b4,rightshoulder:b5,start:b9,back:b8,dpup:h0.1,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,lefty:a1,leftx:a0,righty:a3,rightx:a2,guide:b10',
    '030000005e0400000a0b000005040000,Generic Xbox pad,platform:Linux,a:b1,b:b0,y:b2,x:b3,lefttrigger:b6,righttrigger:b7,leftstick:b11,rightstick:b12,leftshoulder:b4,rightshoulder:b5,start:b9,back:b8,dpup:h0.1,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,lefty:a1,leftx:a0,righty:a3,rightx:a2',
    '030000005e040000ea02000001030000,Microsoft Xbox One S pad,platform:Linux,a:b0,b:b1,y:b3,x:b2,leftshoulder:b4,rightshoulder:b5,start:b7,back:b6,dpup:h0.1,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,lefty:a1,leftx:a0,righty:a4,rightx:a3,guide:b8',
    '030000004f04000026b3000002040000,Thrustmaster Gamepad GP XID,platform:Linux,a:b0,b:b1,y:b3,x:b2,lefttrigger:a2,righttrigger:a5,leftstick:b9,rightstick:b10,leftshoulder:b4,rightshoulder:b5,start:b7,back:b6,dpup:h0.1,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,lefty:a1,leftx:a0,righty:a4,rightx:a3,guide:b8'
  ].join('\n')

  testGenerateConfig() {
    let options = {
      '-v': true,
      '--comment': 'Generated by test'
    }
    importer.generateGlobalConfig(options, CONFIG_ROOT, BTC_BIN_DIR, DROPIN_DIR);

    let changedFiles = execSync(`git status --porcelain test/resource`, { encoding: 'utf8' }) || "";
    LOGGER.userOnly("$: git status --porcelain test/resource:\n" + changedFiles)
    if (changedFiles.trim().length > 0) {
      changedFiles = changedFiles
        .split('\n').filter(_ => _.trim().length > 0)
        .map(_ => _.substring(3));
      changedFiles.forEach(logDiff);
      assert.fail(`Generated config files don't match expected output (details in log):\n${changedFiles.join('\n')}`);
    }
  }

  testInputCfgAsSDL() {
    let controllerTags = ['030000004f04000026b3000002040000:Thrustmaster', '030000005e040000ea02000001030000:pad'];

    //get result using default binary path and no file argument
    let defaultResult = importer.readControllerSDL(controllerTags);
    //manually provide file path (it is the same)
    let customFileResult = importer.readControllerSDL(BTC_BIN_DIR + '/es_input.cfg', controllerTags);

    assert.deepEqual(defaultResult, customFileResult,
      'Found values must be identical for custom and default lookups targeting the same file');

    assert.equal(defaultResult.join('\n'), ImportTests.EXPECTED_SDL);
  }

  testSdlInEffectiveProperties() {
    let { ProcessOutput } = new require('../utils/output-capturing.js');

    let expectedResult = [
      "batocera_sdl['0']='030000005e040000ea02000001030000,Microsoft Xbox One S pad,platform:Linux,a:b0,b:b1,y:b3,x:b2,leftshoulder:b4,rightshoulder:b5,start:b7,back:b6,dpup:h0.1,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,lefty:a1,leftx:a0,righty:a4,rightx:a3,guide:b8'",
      "batocera_sdl['1']='030000004f04000026b3000002040000,Thrustmaster Gamepad GP XID,platform:Linux,a:b0,b:b1,y:b3,x:b2,lefttrigger:a2,righttrigger:a5,leftstick:b9,rightstick:b10,leftshoulder:b4,rightshoulder:b5,start:b7,back:b6,dpup:h0.1,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,lefty:a1,leftx:a0,righty:a4,rightx:a3,guide:b8'"
    ]

    let controllerTags = ['030000004f04000026b3000002040000:"Thrustmaster"', '030000005e040000ea02000001030000:"pad"'];
    let cmdArguments = [
      '--format', 'sh',
      '--strip-prefix', '1',
      '%ROMSDIR%/windows/test-game.wine',
      ...controllerTags
    ]
    let result = ProcessOutput.captureFor(() => API.effectiveProperties(...cmdArguments));
    let effectiveOutput = result.out.writtenToHandle.trim().split('\n');
    effectiveOutput = effectiveOutput.slice(-2);

    assert.deepEqual(effectiveOutput, expectedResult);
  }
}

runTestClass(ImportTests);
